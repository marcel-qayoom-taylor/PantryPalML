[project]
name = "pantry-pal-ml"
version = "0.1.0"
description = "Machine Learning for PantryPal"
requires-python = ">=3.12"
dependencies = [
    "lightgbm>=4.6.0",
    "matplotlib>=3.10.5",
    "pandas>=2.3.2",
    "python-dotenv>=1.1.1",
    "scikit-learn>=1.7.1",
    "seaborn>=0.13.2",
    "supabase>=2.18.1",
]

[project.optional-dependencies]
dev = ["ruff>=0.12.11"]

[project.scripts]
etl = "recipe_recommender.etl.events.event_transformation:main"

[tool.uv]
package = true

# Ruff configuration for static analysis
# IDE linter may show schema warnings - ignore them, Ruff config is valid
[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "*.egg-info",
    ".pytest_cache",
    "supabase/",
]

[tool.ruff.lint]
# Enable comprehensive rule sets for data science/ML projects
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes (unused imports, undefined vars)
    "UP",  # pyupgrade (modern Python syntax)
    "B",   # flake8-bugbear (common bugs)
    "I",   # isort (import sorting)
    "C90", # mccabe complexity
    "PD",  # pandas-vet (pandas best practices)
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",    # Line too long (we use line-length = 88)
    "S101",    # Use of assert (common in data science)
    "PD901",   # df is a common variable name in pandas code
    "PLR0913", # Too many arguments (common in ML models)
    "PLR2004", # Magic value used in comparison (common with hyperparameters)
    "S311",    # Standard pseudo-random generators (not cryptographic use)
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicitly concatenated string literals (conflicts with formatter)
]

# Ignore specific rules in specific files/patterns
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]           # Allow unused imports in __init__.py
"**/analysis/**" = ["T201"]        # Allow print statements in analysis scripts
"**/transformations/**" = ["T201"] # Allow print statements in ETL scripts

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
# Allow single letter variable names in mathematical contexts
extend-ignore-names = [
    "X",
    "y",
    "X_train",
    "X_test",
    "X_val",
    "y_train",
    "y_test",
    "y_val",
]

[tool.ruff.lint.pylint]
max-args = 8 # Allow more arguments for ML model constructors

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Vulture configuration for dead code detection
[tool.vulture]
# Exclude directories from dead code scanning
exclude = [
    "recipe_recommender/analysis/", # Skip reference implementations
    "*/__pycache__/",               # Skip cache directories
    "build/",                       # Skip build artifacts
    "dist/",                        # Skip distribution files
    "*.egg-info/",                  # Skip package metadata
    ".venv/",                       # Skip virtual environment
    ".git/",                        # Skip git directory
]
# Ignore specific file patterns
ignore_names = [
    "test_*.py", # Test files may have intentional unused code
    "*_test.py", # Test files may have intentional unused code
    "setup.py",  # Setup files may have unused imports
]
min_confidence = 80
paths = ["recipe_recommender"]

# Bandit configuration for security scanning
[tool.bandit]
exclude_dirs = [
    "recipe_recommender/analysis", # Skip reference implementations
    "tests",
    ".venv",
    ".git",
]
skips = [
    "B101", # Skip assert_used test (common in data science)
    "B112", # Skip try_except_continue (appropriate for ML evaluation loops)
    "B601", # Skip paramiko_calls (if using SSH libraries)
]

[dependency-groups]
dev = ["bandit[toml]>=1.8.6", "pre-commit>=4.3.0", "vulture>=2.14"]
